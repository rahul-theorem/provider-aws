/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCConnectionInitParameters struct {

	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication *string `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// The list of subnets in the client VPC to connect to.
	ClientSubnets []*string `json:"clientSubnets,omitempty" tf:"client_subnets,omitempty"`

	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Key-value map of resource tags.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn *string `json:"targetClusterArn,omitempty" tf:"target_cluster_arn,omitempty"`
}

type VPCConnectionObservation struct {

	// Amazon Resource Name (ARN) of the VPC connection.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication *string `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// The list of subnets in the client VPC to connect to.
	ClientSubnets []*string `json:"clientSubnets,omitempty" tf:"client_subnets,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Key-value map of resource tags.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn *string `json:"targetClusterArn,omitempty" tf:"target_cluster_arn,omitempty"`

	// The VPC ID of the remote client.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type VPCConnectionParameters struct {

	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	// +kubebuilder:validation:Optional
	Authentication *string `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// The list of subnets in the client VPC to connect to.
	// +kubebuilder:validation:Optional
	ClientSubnets []*string `json:"clientSubnets,omitempty" tf:"client_subnets,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The security groups to attach to the ENIs for the broker nodes.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Amazon Resource Name (ARN) of the cluster.
	// +kubebuilder:validation:Optional
	TargetClusterArn *string `json:"targetClusterArn,omitempty" tf:"target_cluster_arn,omitempty"`

	// The VPC ID of the remote client.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// VPCConnectionSpec defines the desired state of VPCConnection
type VPCConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCConnectionParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCConnectionInitParameters `json:"initProvider,omitempty"`
}

// VPCConnectionStatus defines the observed state of VPCConnection.
type VPCConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCConnection is the Schema for the VPCConnections API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VPCConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authentication) || (has(self.initProvider) && has(self.initProvider.authentication))",message="spec.forProvider.authentication is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientSubnets) || (has(self.initProvider) && has(self.initProvider.clientSubnets))",message="spec.forProvider.clientSubnets is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroups) || (has(self.initProvider) && has(self.initProvider.securityGroups))",message="spec.forProvider.securityGroups is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetClusterArn) || (has(self.initProvider) && has(self.initProvider.targetClusterArn))",message="spec.forProvider.targetClusterArn is a required parameter"
	Spec   VPCConnectionSpec   `json:"spec"`
	Status VPCConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCConnectionList contains a list of VPCConnections
type VPCConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCConnection `json:"items"`
}

// Repository type metadata.
var (
	VPCConnection_Kind             = "VPCConnection"
	VPCConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCConnection_Kind}.String()
	VPCConnection_KindAPIVersion   = VPCConnection_Kind + "." + CRDGroupVersion.String()
	VPCConnection_GroupVersionKind = CRDGroupVersion.WithKind(VPCConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCConnection{}, &VPCConnectionList{})
}
